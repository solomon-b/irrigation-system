#ifndef TYPES_H
#define TYPES_H

#include <Arduino.h>
#include <WiFi.h>

//----------------------------------------------------------------------------//
// Hardware Configuration (extern declarations)
//----------------------------------------------------------------------------//

extern const int power_led_pin;
extern const int wifi_led_pin;
extern const int zone1_led_pin;
extern const int zone2_led_pin;
extern const int zone3_led_pin;

//----------------------------------------------------------------------------//
// Network Configuration (extern declarations)
//----------------------------------------------------------------------------//

extern const char* server_hostname;
extern const int server_port;

//----------------------------------------------------------------------------//
// Type Definitions (Moore Machine Architecture Data Structures)
//----------------------------------------------------------------------------//

/*
 * In Moore machine architecture, we model our application as a formal state machine.
 * These types define the "vocabulary" of our system - what states exist,
 * what inputs can trigger transitions, and what effects are produced.
 */

/*
 * InputType: The input alphabet Σ of our Moore machine
 * 
 * In Moore machine theory, inputs are symbols from a finite alphabet that trigger
 * state transitions. These represent events that can occur in our system:
 * user inputs, timer events, hardware state changes, etc.
 * 
 * Each input type represents a distinct stimulus that can cause the machine
 * to transition from one state to another via the transition function δ.
 */
enum InputType {
  INPUT_NONE,                     // No input (used as default/placeholder)
  INPUT_RETRY_CONNECTION,         // User pressed 'r' to retry WiFi connection
  INPUT_REQUEST_CREDENTIALS,      // User pressed 'c' to enter new WiFi credentials
  INPUT_CREDENTIALS_ENTERED,      // User finished entering SSID and password
  INPUT_CONNECTION_STARTED,       // WiFi.begin() was called, reset shouldReconnect flag
  INPUT_WIFI_CONNECTED,           // Hardware detected WiFi connection established
  INPUT_WIFI_DISCONNECTED,        // Hardware detected WiFi connection lost
  INPUT_SCHEDULE_RECEIVED,        // HTTP response with new zone schedule received
  INPUT_HTTP_ERROR,               // HTTP request failed
  INPUT_CREDENTIALS_SAVED,        // Credentials have been saved to flash
  INPUT_SCHEDULE_SAVED,           // Schedule has been saved to flash
  INPUT_POLL_STARTED,             // HTTP polling has started
  INPUT_TICK                      // Timer event - check for state changes
};

/*
 * OutputType: The output alphabet Γ of our Moore machine
 * 
 * Outputs represent the outputs produced by the Moore machine based on the current state.
 * In Moore machine theory, outputs depend only on the current state (not on inputs).
 * Outputs are executed by the main loop after being generated by the output function λ.
 */
enum OutputType {
  EFFECT_NONE,                    // No effect to execute
  EFFECT_UPDATE_LEDS,             // Update LED indicators based on current mode
  EFFECT_SAVE_CREDENTIALS,        // Persist credentials to flash storage
  EFFECT_SAVE_SCHEDULE,           // Persist schedule to flash storage
  EFFECT_START_WIFI_CONNECTION,   // Initiate WiFi connection attempt
  EFFECT_RENDER_UI,               // Update serial interface display
  EFFECT_LOG_CONNECTION_SUCCESS,  // Display successful connection message
  EFFECT_LOG_CONNECTION_LOST,     // Display disconnection message
  EFFECT_POLL_SCHEDULE,           // Make HTTP request to get irrigation schedule
  EFFECT_UPDATE_ZONES             // Update zone LEDs based on current schedule
};

/*
 * Credentials: WiFi network authentication data
 * 
 * In C++, 'struct' is like a class but with public members by default.
 * This struct holds WiFi network name (SSID) and password.
 * 
 * Key C++ concepts:
 * - char arrays: Fixed-size string buffers (64 characters max)
 * - const methods: Promise not to modify the object's data
 * - Member functions: Methods that belong to this struct
 */
struct Credentials {
  char ssid[64];  // WiFi network name (fixed-size character array)
  char pass[64];  // WiFi password (fixed-size character array)
  
  // Helper method to check if credentials are empty
  // 'const' means this method won't modify the struct's data
  bool isEmpty() const {
    return ssid[0] == '\0';  // '\0' is the null terminator (end of string)
  }
  
  // Helper method to validate credential length
  // strlen() counts characters until it hits the null terminator
  bool isValid() const {
    return strlen(ssid) > 0 && strlen(ssid) < 64 && 
           strlen(pass) > 0 && strlen(pass) < 64;
  }
};

/*
 * IrrigationSchedule: Zone activation schedule from web server
 * 
 * Represents the irrigation schedule received from the HTTP endpoint.
 * Each zone corresponds to a different irrigation area/valve.
 */
struct IrrigationSchedule {
  bool zone1;  // Zone 1 activation state
  bool zone2;  // Zone 2 activation state
  bool zone3;  // Zone 3 activation state
  unsigned long lastUpdate;  // Timestamp of last successful update
  
  // Constructor with default values
  IrrigationSchedule() : zone1(false), zone2(false), zone3(false), lastUpdate(0) {}
  
  // Check if schedule data is stale (older than 5 minutes)
  bool isStale() const {
    return (millis() - lastUpdate) > 300000;  // 5 minutes in milliseconds
  }
};

/*
 * AppMode: The state space Q of our Moore machine
 * 
 * This enum represents the finite set of states our Moore machine can be in.
 * In Moore machine theory, the output (LED patterns, UI messages) depends
 * only on the current state, not on the input that caused the transition.
 * 
 * State space Q = {INITIALIZING, CONNECTING, CONNECTED, DISCONNECTED, ENTERING_CREDENTIALS}
 * 
 * State transitions via δ: Q × Σ → Q:
 * INITIALIZING → CONNECTING → CONNECTED ⇄ DISCONNECTED
 *                   ↓           ↗
 *            ENTERING_CREDENTIALS
 */
enum AppMode {
  MODE_INITIALIZING,         // Starting up, checking for stored credentials
  MODE_CONNECTING,           // Attempting to connect to WiFi network
  MODE_CONNECTED,            // Successfully connected to WiFi
  MODE_DISCONNECTED,         // Not connected (initial state or lost connection)
  MODE_ENTERING_CREDENTIALS  // User is typing SSID/password via Serial
};

/*
 * AppState: Current state q ∈ Q of the Moore machine
 * 
 * This struct represents the complete state of our Moore machine at any given time.
 * In Moore machine theory, this is the current configuration that determines:
 * 1. What outputs are produced (λ(q) → outputs)
 * 2. What transitions are possible given an input (δ(q, σ) → q')
 * 
 * The state contains all information needed to:
 * - Determine current outputs (LED states, UI messages)
 * - Process the next input symbol
 * - Maintain system consistency across state transitions
 * 
 * Key C++ concepts:
 * - Constructor: Special method called when creating an object
 * - Initialization list: Efficient way to set member values in constructor
 * - unsigned long: 32-bit positive integer (for timestamps)
 * - Member initialization: Setting values when the object is created
 */
struct AppState {
  Credentials credentials;      // Current WiFi network credentials
  AppMode mode;                // What the application is currently doing
  int wifiStatus;              // Last known WiFi hardware status
  unsigned long lastUpdate;    // Timestamp of last state change (milliseconds)
  bool credentialsChanged;     // Flag: need to save credentials to flash
  bool shouldReconnect;        // Flag: need to call WiFi.begin()
  bool shouldPollNow;          // Flag: need to poll immediately
  bool scheduleChanged;        // Flag: need to save schedule to flash
  IrrigationSchedule schedule; // Current irrigation zone schedule
  unsigned long lastPollTime;  // Timestamp of last HTTP poll attempt
  bool httpError;              // Flag: last HTTP request failed
  
  // Constructor: Called when creating a new AppState
  // The colon starts an "initialization list" - efficient way to set member values
  AppState() : mode(MODE_INITIALIZING),           // Start in initializing mode
               wifiStatus(WL_IDLE_STATUS),        // WiFi not started yet
               lastUpdate(0),                     // No timestamp yet
               credentialsChanged(false),         // No changes to save
               shouldReconnect(false),            // No connection needed yet
               shouldPollNow(false),              // No immediate polling needed
               scheduleChanged(false),            // No schedule changes to save
               lastPollTime(0),                   // No polls yet
               httpError(false) {                 // No HTTP errors yet
    // Set credential strings to empty (null-terminated)
    credentials.ssid[0] = '\0';  // Empty string
    credentials.pass[0] = '\0';  // Empty string
  }
};

/*
 * Input: Symbols from input alphabet Σ
 * 
 * Input symbols carry information about events that occurred. They are formal
 * symbols from our input alphabet Σ that are fed to the transition function δ.
 * The transition function δ(q, σ) uses current state q and input symbol σ
 * to determine the next state q'.
 * 
 * Key C++ concepts:
 * - static methods: Class methods that don't need an object instance
 * - Factory pattern: Static methods that create and return objects
 * - const reference: Efficient way to pass objects without copying
 * - Ternary operator: condition ? value_if_true : value_if_false
 */
struct Input {
  InputType type;                 // Which input symbol this is
  Credentials newCredentials;     // New credentials (if INPUT_CREDENTIALS_ENTERED)
  int wifiStatus;                // WiFi status code (if INPUT_WIFI_*)
  IrrigationSchedule newSchedule; // New schedule (if INPUT_SCHEDULE_RECEIVED)
  
  // Default constructor
  Input() : type(INPUT_NONE), wifiStatus(0) {
    newCredentials.ssid[0] = '\0';
    newCredentials.pass[0] = '\0';
  }
  
  // Factory methods: Static functions that create Input symbols
  // These are like constructors but more explicit about what they create
  
  static Input none() {
    Input i;                      // Create empty Input on the stack
    i.type = INPUT_NONE;
    return i;                     // Return by value (copied)
  }
  
  static Input retryConnection() {
    Input i;
    i.type = INPUT_RETRY_CONNECTION;
    return i;
  }
  
  static Input requestCredentials() {
    Input i;
    i.type = INPUT_REQUEST_CREDENTIALS;
    return i;
  }
  
  // const Credentials& means "reference to Credentials that won't be modified"
  // This avoids copying the 128-byte Credentials struct
  static Input credentialsEntered(const Credentials& creds) {
    Input i;
    i.type = INPUT_CREDENTIALS_ENTERED;
    i.newCredentials = creds;     // This DOES copy the credentials
    return i;
  }
  
  static Input connectionStarted() {
    Input i;
    i.type = INPUT_CONNECTION_STARTED;
    return i;
  }
  
  // Ternary operator: condition ? value_if_true : value_if_false
  static Input wifiStatusChanged(int status) {
    Input i;
    i.type = (status == WL_CONNECTED) ? INPUT_WIFI_CONNECTED : INPUT_WIFI_DISCONNECTED;
    i.wifiStatus = status;
    return i;
  }
  
  static Input tick() {
    Input i;
    i.type = INPUT_TICK;
    return i;
  }
  
  static Input scheduleReceived(const IrrigationSchedule& schedule) {
    Input i;
    i.type = INPUT_SCHEDULE_RECEIVED;
    i.newSchedule = schedule;
    return i;
  }
  
  static Input httpError() {
    Input i;
    i.type = INPUT_HTTP_ERROR;
    return i;
  }
  
  static Input credentialsSaved() {
    Input i;
    i.type = INPUT_CREDENTIALS_SAVED;
    return i;
  }
  
  static Input scheduleSaved() {
    Input i;
    i.type = INPUT_SCHEDULE_SAVED;
    return i;
  }
  
  static Input pollStarted() {
    Input i;
    i.type = INPUT_POLL_STARTED;
    return i;
  }
};

/*
 * Output: Output symbols from effect alphabet Γ
 * 
 * Outputs carry information about what operations should be performed
 * based on the current state. They are generated by the output function λ
 * and executed by the main loop.
 */
struct Output {
  OutputType type;                // Which effect this is
  AppMode currentMode;            // Current mode for UI updates
  bool shouldStartConnection;     // Flag: should initiate WiFi connection
  bool credentialsNeedSaving;     // Flag: should save credentials to flash
  
  Output() : type(EFFECT_NONE), currentMode(MODE_INITIALIZING),
             shouldStartConnection(false), credentialsNeedSaving(false) {}
  
  // Factory methods for creating specific effects
  static Output none() {
    Output e;
    e.type = EFFECT_NONE;
    return e;
  }
  
  static Output updateLEDs(AppMode mode) {
    Output e;
    e.type = EFFECT_UPDATE_LEDS;
    e.currentMode = mode;
    return e;
  }
  
  static Output saveCredentials() {
    Output e;
    e.type = EFFECT_SAVE_CREDENTIALS;
    e.credentialsNeedSaving = true;
    return e;
  }
  
  static Output saveSchedule() {
    Output e;
    e.type = EFFECT_SAVE_SCHEDULE;
    return e;
  }
  
  static Output startWiFiConnection() {
    Output e;
    e.type = EFFECT_START_WIFI_CONNECTION;
    e.shouldStartConnection = true;
    return e;
  }
  
  static Output renderUI(AppMode mode) {
    Output e;
    e.type = EFFECT_RENDER_UI;
    e.currentMode = mode;
    return e;
  }
  
  static Output logConnectionSuccess() {
    Output e;
    e.type = EFFECT_LOG_CONNECTION_SUCCESS;
    return e;
  }
  
  static Output logConnectionLost() {
    Output e;
    e.type = EFFECT_LOG_CONNECTION_LOST;
    return e;
  }
  
  static Output pollSchedule() {
    Output e;
    e.type = EFFECT_POLL_SCHEDULE;
    return e;
  }
  
  static Output updateZones() {
    Output e;
    e.type = EFFECT_UPDATE_ZONES;
    return e;
  }
};

#endif // TYPES_H
